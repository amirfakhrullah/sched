// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Day {
    monday
    tuesday
    wednesday
    thursday
    friday
}

model Course {
    id              String     @id @default(cuid())
    user            User       @relation(fields: [userId], references: [id])
    userId          String
    name            String     @db.VarChar(500)
    color           String     @db.VarChar(20)
    start_date      Int
    end_date        Int?
    weekly_schedule Schedule[]

    @@index([userId])
}

model Schedule {
    id         String   @id @default(cuid())
    day        Day
    start_time String   @db.VarChar(4)
    end_time   String   @db.VarChar(4)
    Course     Course  @relation(fields: [courseId], references: [id])
    courseId   String
    lessons    Lesson[]
}

model Lesson {
    id         String   @id @default(cuid())
    unit       String   @db.VarChar(255)
    note       String   @db.VarChar(4000)
    tags       String[] @db.VarChar(255)
    date       Int
    Schedule   Schedule @relation(fields: [scheduleId], references: [id])
    scheduleId String
}

// Next auth -----------------------------------------------
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Course        Course[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
